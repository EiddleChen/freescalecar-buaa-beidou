=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "LED1"      (component LED)
   - LED1_On -This turns the LED on.
   - LED1_Off -This turns the LED off.
   - LED1_Neg -This negates/toggles the LED
   - LED1_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED1_Put -Turns the LED on or off.
   - LED1_Init -Performs the LED driver initialization.
   - LED1_Deinit -Deinitializes the driver

Module "LED2"      (component LED)
   - LED2_On -This turns the LED on.
   - LED2_Off -This turns the LED off.
   - LED2_Neg -This negates/toggles the LED
   - LED2_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED2_Put -Turns the LED on or off.
   - LED2_Init -Performs the LED driver initialization.
   - LED2_Deinit -Deinitializes the driver

Module "LED3"      (component LED)
   - LED3_On -This turns the LED on.
   - LED3_Off -This turns the LED off.
   - LED3_Neg -This negates/toggles the LED
   - LED3_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED3_Put -Turns the LED on or off.
   - LED3_Init -Performs the LED driver initialization.
   - LED3_Deinit -Deinitializes the driver

Module "LED4"      (component LED)
   - LED4_On -This turns the LED on.
   - LED4_Off -This turns the LED off.
   - LED4_Neg -This negates/toggles the LED
   - LED4_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED4_Put -Turns the LED on or off.
   - LED4_Init -Performs the LED driver initialization.
   - LED4_Deinit -Deinitializes the driver

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for approximately 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for 100 CPU cycles.
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "GPIO1"     (component GPIO_LDD)
   - GPIO1_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - GPIO1_Deinit -This method disables the device and frees the device data structure memory.
   - GPIO1_GetPortValue -This method returns the current port input data value. Only configured pins (through all of bit fields 
                in this component) are returned.
   - GPIO1_ClearPortBits -This method drives the specified bits of the port to the inactive level. Only configured pins 
                (through all of bit fields in this component) are affected.
   - GPIO1_SetPortBits -This method drives the specified bits of the port to the active level. Only configured pins (through 
                all of bit fields in this component) are affected.
   - GPIO1_TogglePortBits -This method inverts the specified bits of the port to another level. Only configured pins (through 
                all of bit fields in this component) are affected.
   - GPIO1_SetFieldValue -This method sets the output data value of the specified bit field.
   - GPIO1_GetFieldValue -This method returns the current input data of the specified field.
   - GPIO1_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - GPIO1_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - GPIO1_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - GPIO1_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - GPIO1_SetFieldOutputDirection -This method sets all pins of the field to the output direction.

Module "AS1"       (component AsynchroSerial)
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS1_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.
   - AS1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "AS2"       (component AsynchroSerial)
   - AS2_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS2_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS2_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS2_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.
   - AS2_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS2_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS2_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS2_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "AS3"       (component AsynchroSerial)
   - AS3_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS3_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS3_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS3_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.
   - AS3_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS3_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS3_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS3_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "USB1"      (component FSL_USB_Stack)
   - USB1_GetFreeInTxBuf -Returns the number of free character in the send buffer
   - USB1_GetCharsInTxBuf -Returns the number of character in the send buffer
   - USB1_GetCharsInRxBuf -Returns the number of character in the receive buffer
   - USB1_GetChar -Receives a character from the USB interface. Function is not blocking if there is no character in the input 
                buffer.
   - USB1_RecvChar -Receives a character from the USB interface. Function is blocking if there is no character in the input 
                buffer.
   - USB1_SendChar -Method to send a character to the USB interface. Method is non-blocking: If the output buffer is full, it 
                tries to send it over USB. If this fails or buffer is still full, the character will be lost. If OnError() 
                event is enabled, the error event will be called in case of error.
   - USB1_SendString -Method to send a string to the USB interface. Method is non-blocking: if string cannot be sent, it will 
                be lost. If OnError() event is enabled, the error event will be called in case of error.
   - USB1_PutBufferChecked -Puts a data block into the output buffer, but does not send it. If there is not enough size 
                available, then ERR_TXFULL is returned, otherwise ERR_OK. The application then needs to call USB_App_Callback() 
                to actually send the buffer.
   - USB1_App_Task -Application task to be called periodically from the main task.
   - USB1_Init -Initializes the driver

Module "I2C2"      (component I2C_LDD)
   - I2C2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - I2C2_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors,
                etc.
   - I2C2_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C2_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C2_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.
   - I2C2_GetError -Returns value of error mask, e.g. LDD_I2C_ARBIT_LOST.

Module "Cpu"       (component MKL25Z128LK4)

===================================================================================
