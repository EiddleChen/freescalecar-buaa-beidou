   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SR_reg,1,1
  18              		.global	SR_lock
  19              		.section	.bss.SR_lock,"aw",%nobits
  22              	SR_lock:
  23 0000 00       		.space	1
  24              		.section	.text.Cpu_ivINT_PORTA,"ax",%progbits
  25              		.align	2
  26              		.global	Cpu_ivINT_PORTA
  27              		.code	16
  28              		.thumb_func
  30              	Cpu_ivINT_PORTA:
  31              	.LFB0:
  32              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /** ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2013-05-25, 21:14, # CodeGen: 81
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  19:../Generated_Code/Cpu.c **** **     
  20:../Generated_Code/Cpu.c **** **     http      : www.freescale.com
  21:../Generated_Code/Cpu.c **** **     mail      : support@freescale.com
  22:../Generated_Code/Cpu.c **** ** ###################################################################*/
  23:../Generated_Code/Cpu.c **** 
  24:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  25:../Generated_Code/Cpu.c **** #include "CsIO1.h"
  26:../Generated_Code/Cpu.c **** #include "IO1.h"
  27:../Generated_Code/Cpu.c **** #include "I2C2.h"
  28:../Generated_Code/Cpu.c **** #include "MotorLeft_PTE30.h"
  29:../Generated_Code/Cpu.c **** #include "PwmLdd3.h"
  30:../Generated_Code/Cpu.c **** #include "MotorRight_PTA5.h"
  31:../Generated_Code/Cpu.c **** #include "PwmLdd2.h"
  32:../Generated_Code/Cpu.c **** #include "MotorLeft_PTE31.h"
  33:../Generated_Code/Cpu.c **** #include "PwmLdd4.h"
  34:../Generated_Code/Cpu.c **** #include "MotorRight_PTA4.h"
  35:../Generated_Code/Cpu.c **** #include "PwmLdd1.h"
  36:../Generated_Code/Cpu.c **** #include "TU1.h"
  37:../Generated_Code/Cpu.c **** #include "WAIT1.h"
  38:../Generated_Code/Cpu.c **** #include "AD1.h"
  39:../Generated_Code/Cpu.c **** #include "AdcLdd1.h"
  40:../Generated_Code/Cpu.c **** #include "CCD_SI.h"
  41:../Generated_Code/Cpu.c **** #include "BitsIoLdd1.h"
  42:../Generated_Code/Cpu.c **** #include "CCD_CLK.h"
  43:../Generated_Code/Cpu.c **** #include "BitsIoLdd2.h"
  44:../Generated_Code/Cpu.c **** #include "EInt1.h"
  45:../Generated_Code/Cpu.c **** #include "ExtIntLdd1.h"
  46:../Generated_Code/Cpu.c **** #include "EInt2.h"
  47:../Generated_Code/Cpu.c **** #include "ExtIntLdd2.h"
  48:../Generated_Code/Cpu.c **** #include "Bit1.h"
  49:../Generated_Code/Cpu.c **** #include "BitIoLdd1.h"
  50:../Generated_Code/Cpu.c **** #include "TU2.h"
  51:../Generated_Code/Cpu.c **** #include "TU3.h"
  52:../Generated_Code/Cpu.c **** #include "Servo_Video1.h"
  53:../Generated_Code/Cpu.c **** #include "PwmLdd5.h"
  54:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  55:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  56:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  57:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  58:../Generated_Code/Cpu.c **** #include "Events.h"
  59:../Generated_Code/Cpu.c **** #include "Cpu.h"
  60:../Generated_Code/Cpu.c **** 
  61:../Generated_Code/Cpu.c **** /* Global variables */
  62:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  63:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  64:../Generated_Code/Cpu.c **** 
  65:../Generated_Code/Cpu.c **** 
  66:../Generated_Code/Cpu.c **** /*
  67:../Generated_Code/Cpu.c **** ** ===================================================================
  68:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_ivINT_PORTA (component MKL25Z128LK4)
  69:../Generated_Code/Cpu.c **** **
  70:../Generated_Code/Cpu.c **** **     Description :
  71:../Generated_Code/Cpu.c **** **         This ISR services the ivINT_PORTA interrupt shared by several 
  72:../Generated_Code/Cpu.c **** **         components.
  73:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  74:../Generated_Code/Cpu.c **** ** ===================================================================
  75:../Generated_Code/Cpu.c **** */
  76:../Generated_Code/Cpu.c **** PE_ISR(Cpu_ivINT_PORTA)
  77:../Generated_Code/Cpu.c **** {
  33              		.loc 1 77 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
  78:../Generated_Code/Cpu.c ****   ExtIntLdd1_Interrupt();              /* Call the service routine */
  43              		.loc 1 78 0
  44 0004 FFF7FEFF 		bl	ExtIntLdd1_Interrupt
  79:../Generated_Code/Cpu.c ****   ExtIntLdd2_Interrupt();              /* Call the service routine */
  45              		.loc 1 79 0
  46 0008 FFF7FEFF 		bl	ExtIntLdd2_Interrupt
  80:../Generated_Code/Cpu.c **** }
  47              		.loc 1 80 0
  48 000c BD46     		mov	sp, r7
  49              		@ sp needed for prologue
  50 000e 80BD     		pop	{r7, pc}
  51              		.cfi_endproc
  52              	.LFE0:
  54              		.section	.text.Cpu_Interrupt,"ax",%progbits
  55              		.align	2
  56              		.global	Cpu_Interrupt
  57              		.code	16
  58              		.thumb_func
  60              	Cpu_Interrupt:
  61              	.LFB1:
  81:../Generated_Code/Cpu.c **** 
  82:../Generated_Code/Cpu.c **** /*
  83:../Generated_Code/Cpu.c **** ** ===================================================================
  84:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
  85:../Generated_Code/Cpu.c **** **
  86:../Generated_Code/Cpu.c **** **     Description :
  87:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
  88:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  89:../Generated_Code/Cpu.c **** ** ===================================================================
  90:../Generated_Code/Cpu.c **** */
  91:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
  92:../Generated_Code/Cpu.c **** {
  62              		.loc 1 92 0
  63              		.cfi_startproc
  64 0000 80B5     		push	{r7, lr}
  65              	.LCFI2:
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 7, -8
  68              		.cfi_offset 14, -4
  69 0002 00AF     		add	r7, sp, #0
  70              	.LCFI3:
  71              		.cfi_def_cfa_register 7
  93:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
  94:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  72              		.loc 1 94 0
  73              	@ 94 "../Generated_Code/Cpu.c" 1
  74 0004 FFBE     		BKPT 255
  75              	@ 0 "" 2
  95:../Generated_Code/Cpu.c **** }
  76              		.loc 1 95 0
  77              		.code	16
  78 0006 BD46     		mov	sp, r7
  79              		@ sp needed for prologue
  80 0008 80BD     		pop	{r7, pc}
  81              		.cfi_endproc
  82              	.LFE1:
  84 000a C046     		.section	.text.__init_hardware,"ax",%progbits
  85              		.align	2
  86              		.global	__init_hardware
  87              		.code	16
  88              		.thumb_func
  90              	__init_hardware:
  91              	.LFB2:
  96:../Generated_Code/Cpu.c **** 
  97:../Generated_Code/Cpu.c **** 
  98:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
  99:../Generated_Code/Cpu.c **** 
 100:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
 101:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
 102:../Generated_Code/Cpu.c **** void __init_hardware(void)
 103:../Generated_Code/Cpu.c **** {
  92              		.loc 1 103 0
  93              		.cfi_startproc
  94 0000 80B5     		push	{r7, lr}
  95              	.LCFI4:
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 7, -8
  98              		.cfi_offset 14, -4
  99 0002 00AF     		add	r7, sp, #0
 100              	.LCFI5:
 101              		.cfi_def_cfa_register 7
 104:../Generated_Code/Cpu.c **** 
 105:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 106:../Generated_Code/Cpu.c **** 
 107:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
 108:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 109:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 102              		.loc 1 109 0
 103 0004 514A     		ldr	r2, .L9
 104 0006 5249     		ldr	r1, .L9+4
 105 0008 524B     		ldr	r3, .L9+8
 106 000a D150     		str	r1, [r2, r3]
 110:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 111:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 112:../Generated_Code/Cpu.c ****   SIM_COPC = 0x00U;                                                   
 107              		.loc 1 112 0
 108 000c 524A     		ldr	r2, .L9+12
 109 000e 8823     		mov	r3, #136
 110 0010 5B01     		lsl	r3, r3, #5
 111 0012 0021     		mov	r1, #0
 112 0014 D150     		str	r1, [r2, r3]
 113:../Generated_Code/Cpu.c ****   /* System clock initialization */
 114:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTB=1,PORTA=1 */
 115:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
 113              		.loc 1 115 0
 114 0016 504A     		ldr	r2, .L9+12
 115 0018 4F49     		ldr	r1, .L9+12
 116 001a 504B     		ldr	r3, .L9+16
 117 001c CB58     		ldr	r3, [r1, r3]
 118 001e F821     		mov	r1, #248
 119 0020 8901     		lsl	r1, r1, #6
 120 0022 1943     		orr	r1, r3
 121 0024 4D4B     		ldr	r3, .L9+16
 122 0026 D150     		str	r1, [r2, r3]
 116:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTD_MASK |
 117:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTC_MASK |
 118:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
 119:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
 120:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,?
 121:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV4(0x01); /* Update system prescalers */
 123              		.loc 1 121 0
 124 0028 4B4A     		ldr	r2, .L9+12
 125 002a 4D4B     		ldr	r3, .L9+20
 126 002c 8021     		mov	r1, #128
 127 002e 4902     		lsl	r1, r1, #9
 128 0030 D150     		str	r1, [r2, r3]
 122:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=1 */
 123:../Generated_Code/Cpu.c ****   SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK; /* Select PLL as a clock source for various peripherals */
 129              		.loc 1 123 0
 130 0032 494A     		ldr	r2, .L9+12
 131 0034 4849     		ldr	r1, .L9+12
 132 0036 4B4B     		ldr	r3, .L9+24
 133 0038 CB58     		ldr	r3, [r1, r3]
 134 003a 8021     		mov	r1, #128
 135 003c 4902     		lsl	r1, r1, #9
 136 003e 1943     		orr	r1, r3
 137 0040 484B     		ldr	r3, .L9+24
 138 0042 D150     		str	r1, [r2, r3]
 124:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=3 */
 125:../Generated_Code/Cpu.c ****   SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various pe
 139              		.loc 1 125 0
 140 0044 444B     		ldr	r3, .L9+12
 141 0046 444A     		ldr	r2, .L9+12
 142 0048 1268     		ldr	r2, [r2]
 143 004a C021     		mov	r1, #192
 144 004c 0903     		lsl	r1, r1, #12
 145 004e 0A43     		orr	r2, r1
 146 0050 1A60     		str	r2, [r3]
 126:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 127:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 147              		.loc 1 127 0
 148 0052 414A     		ldr	r2, .L9+12
 149 0054 4049     		ldr	r1, .L9+12
 150 0056 434B     		ldr	r3, .L9+24
 151 0058 CB58     		ldr	r3, [r1, r3]
 152 005a 191C     		mov	r1, r3
 153 005c 424B     		ldr	r3, .L9+28
 154 005e 0B40     		and	r3, r1
 155 0060 8021     		mov	r1, #128
 156 0062 4904     		lsl	r1, r1, #17
 157 0064 1943     		orr	r1, r3
 158 0066 3F4B     		ldr	r3, .L9+24
 159 0068 D150     		str	r1, [r2, r3]
 128:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 129:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 130:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 131:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 132:../Generated_Code/Cpu.c ****   /* PORTA_PCR18: ISF=0,MUX=0 */
 133:../Generated_Code/Cpu.c ****   PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 160              		.loc 1 133 0
 161 006a 404B     		ldr	r3, .L9+32
 162 006c 3F4A     		ldr	r2, .L9+32
 163 006e 926C     		ldr	r2, [r2, #72]
 164 0070 111C     		mov	r1, r2
 165 0072 3F4A     		ldr	r2, .L9+36
 166 0074 0A40     		and	r2, r1
 167 0076 9A64     		str	r2, [r3, #72]
 134:../Generated_Code/Cpu.c ****   /* PORTA_PCR19: ISF=0,MUX=0 */
 135:../Generated_Code/Cpu.c ****   PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 168              		.loc 1 135 0
 169 0078 3C4B     		ldr	r3, .L9+32
 170 007a 3C4A     		ldr	r2, .L9+32
 171 007c D26C     		ldr	r2, [r2, #76]
 172 007e 111C     		mov	r1, r2
 173 0080 3B4A     		ldr	r2, .L9+36
 174 0082 0A40     		and	r2, r1
 175 0084 DA64     		str	r2, [r3, #76]
 136:../Generated_Code/Cpu.c ****   /* Switch to FBE Mode */
 137:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 138:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);                                             
 176              		.loc 1 138 0
 177 0086 3B4B     		ldr	r3, .L9+40
 178 0088 2422     		mov	r2, #36
 179 008a 5A70     		strb	r2, [r3, #1]
 139:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 140:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;                                                   
 180              		.loc 1 140 0
 181 008c 3A4B     		ldr	r3, .L9+44
 182 008e 8022     		mov	r2, #128
 183 0090 1A70     		strb	r2, [r3]
 141:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 142:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 184              		.loc 1 142 0
 185 0092 384B     		ldr	r3, .L9+40
 186 0094 9A22     		mov	r2, #154
 187 0096 1A70     		strb	r2, [r3]
 143:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 144:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));                      
 188              		.loc 1 144 0
 189 0098 364B     		ldr	r3, .L9+40
 190 009a 364A     		ldr	r2, .L9+40
 191 009c D278     		ldrb	r2, [r2, #3]
 192 009e D1B2     		uxtb	r1, r2
 193 00a0 1F22     		mov	r2, #31
 194 00a2 0A40     		and	r2, r1
 195 00a4 D2B2     		uxtb	r2, r2
 196 00a6 DA70     		strb	r2, [r3, #3]
 145:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
 146:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x03);                                                   
 197              		.loc 1 146 0
 198 00a8 324B     		ldr	r3, .L9+40
 199 00aa 0322     		mov	r2, #3
 200 00ac 1A71     		strb	r2, [r3, #4]
 147:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 148:../Generated_Code/Cpu.c ****   MCG_C6 = 0x00U;                                                   
 201              		.loc 1 148 0
 202 00ae 314B     		ldr	r3, .L9+40
 203 00b0 0022     		mov	r2, #0
 204 00b2 5A71     		strb	r2, [r3, #5]
 149:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock
 205              		.loc 1 149 0
 206 00b4 C046     		mov	r8, r8
 207              	.L4:
 208              		.loc 1 149 0 is_stmt 0 discriminator 1
 209 00b6 2F4B     		ldr	r3, .L9+40
 210 00b8 9B79     		ldrb	r3, [r3, #6]
 211 00ba DBB2     		uxtb	r3, r3
 212 00bc 1A1C     		mov	r2, r3
 213 00be 1023     		mov	r3, #16
 214 00c0 1340     		and	r3, r2
 215 00c2 F8D1     		bne	.L4
 150:../Generated_Code/Cpu.c ****   }
 151:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 216              		.loc 1 151 0 is_stmt 1
 217 00c4 C046     		mov	r8, r8
 218              	.L5:
 219              		.loc 1 151 0 is_stmt 0 discriminator 1
 220 00c6 2B4B     		ldr	r3, .L9+40
 221 00c8 9B79     		ldrb	r3, [r3, #6]
 222 00ca DBB2     		uxtb	r3, r3
 223 00cc 1A1C     		mov	r2, r3
 224 00ce 0C23     		mov	r3, #12
 225 00d0 1340     		and	r3, r2
 226 00d2 082B     		cmp	r3, #8
 227 00d4 F7D1     		bne	.L5
 152:../Generated_Code/Cpu.c ****   }
 153:../Generated_Code/Cpu.c ****   /* Switch to PBE Mode */
 154:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 155:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;                                                   
 228              		.loc 1 155 0 is_stmt 1
 229 00d6 284B     		ldr	r3, .L9+44
 230 00d8 8022     		mov	r2, #128
 231 00da 1A70     		strb	r2, [r3]
 156:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 157:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 232              		.loc 1 157 0
 233 00dc 254B     		ldr	r3, .L9+40
 234 00de 9A22     		mov	r2, #154
 235 00e0 1A70     		strb	r2, [r3]
 158:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 159:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);                                             
 236              		.loc 1 159 0
 237 00e2 244B     		ldr	r3, .L9+40
 238 00e4 2422     		mov	r2, #36
 239 00e6 5A70     		strb	r2, [r3, #1]
 160:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
 161:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x03);                                                   
 240              		.loc 1 161 0
 241 00e8 224B     		ldr	r3, .L9+40
 242 00ea 0322     		mov	r2, #3
 243 00ec 1A71     		strb	r2, [r3, #4]
 162:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 163:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_PLLS_MASK;                                                   
 244              		.loc 1 163 0
 245 00ee 214B     		ldr	r3, .L9+40
 246 00f0 4022     		mov	r2, #64
 247 00f2 5A71     		strb	r2, [r3, #5]
 164:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 248              		.loc 1 164 0
 249 00f4 C046     		mov	r8, r8
 250              	.L6:
 251              		.loc 1 164 0 is_stmt 0 discriminator 1
 252 00f6 1F4B     		ldr	r3, .L9+40
 253 00f8 9B79     		ldrb	r3, [r3, #6]
 254 00fa DBB2     		uxtb	r3, r3
 255 00fc 1A1C     		mov	r2, r3
 256 00fe 0C23     		mov	r3, #12
 257 0100 1340     		and	r3, r2
 258 0102 082B     		cmp	r3, #8
 259 0104 F7D1     		bne	.L6
 165:../Generated_Code/Cpu.c ****   }
 166:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
 260              		.loc 1 166 0 is_stmt 1
 261 0106 C046     		mov	r8, r8
 262              	.L7:
 263              		.loc 1 166 0 is_stmt 0 discriminator 1
 264 0108 1A4B     		ldr	r3, .L9+40
 265 010a 9B79     		ldrb	r3, [r3, #6]
 266 010c DBB2     		uxtb	r3, r3
 267 010e 1A1C     		mov	r2, r3
 268 0110 4023     		mov	r3, #64
 269 0112 1340     		and	r3, r2
 270 0114 F8D0     		beq	.L7
 167:../Generated_Code/Cpu.c ****   }
 168:../Generated_Code/Cpu.c ****   /* Switch to PEE Mode */
 169:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 170:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;                                                   
 271              		.loc 1 170 0 is_stmt 1
 272 0116 184B     		ldr	r3, .L9+44
 273 0118 8022     		mov	r2, #128
 274 011a 1A70     		strb	r2, [r3]
 171:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 172:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                                             
 275              		.loc 1 172 0
 276 011c 154B     		ldr	r3, .L9+40
 277 011e 1A22     		mov	r2, #26
 278 0120 1A70     		strb	r2, [r3]
 173:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 174:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);                                             
 279              		.loc 1 174 0
 280 0122 144B     		ldr	r3, .L9+40
 281 0124 2422     		mov	r2, #36
 282 0126 5A70     		strb	r2, [r3, #1]
 175:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
 176:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x03);                                                   
 283              		.loc 1 176 0
 284 0128 124B     		ldr	r3, .L9+40
 285 012a 0322     		mov	r2, #3
 286 012c 1A71     		strb	r2, [r3, #4]
 177:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 178:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_PLLS_MASK;                                                   
 287              		.loc 1 178 0
 288 012e 114B     		ldr	r3, .L9+40
 289 0130 4022     		mov	r2, #64
 290 0132 5A71     		strb	r2, [r3, #5]
 179:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
 291              		.loc 1 179 0
 292 0134 C046     		mov	r8, r8
 293              	.L8:
 294              		.loc 1 179 0 is_stmt 0 discriminator 1
 295 0136 0F4B     		ldr	r3, .L9+40
 296 0138 9B79     		ldrb	r3, [r3, #6]
 297 013a DBB2     		uxtb	r3, r3
 298 013c 1A1C     		mov	r2, r3
 299 013e 0C23     		mov	r3, #12
 300 0140 1340     		and	r3, r2
 301 0142 0C2B     		cmp	r3, #12
 302 0144 F7D1     		bne	.L8
 180:../Generated_Code/Cpu.c ****   }
 181:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 182:../Generated_Code/Cpu.c **** 
 183:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 184:../Generated_Code/Cpu.c **** 
 185:../Generated_Code/Cpu.c **** }
 303              		.loc 1 185 0 is_stmt 1
 304 0146 BD46     		mov	sp, r7
 305              		@ sp needed for prologue
 306 0148 80BD     		pop	{r7, pc}
 307              	.L10:
 308 014a C046     		.align	2
 309              	.L9:
 310 014c 00E000E0 		.word	-536813568
 311 0150 00000000 		.word	__vect_table
 312 0154 080D0000 		.word	3336
 313 0158 00700440 		.word	1074032640
 314 015c 38100000 		.word	4152
 315 0160 44100000 		.word	4164
 316 0164 04100000 		.word	4100
 317 0168 FFFFFFFC 		.word	-50331649
 318 016c 00900440 		.word	1074040832
 319 0170 FFF8FFFE 		.word	-16779009
 320 0174 00400640 		.word	1074151424
 321 0178 00500640 		.word	1074155520
 322              		.cfi_endproc
 323              	.LFE2:
 325              		.section	.text.PE_low_level_init,"ax",%progbits
 326              		.align	2
 327              		.global	PE_low_level_init
 328              		.code	16
 329              		.thumb_func
 331              	PE_low_level_init:
 332              	.LFB3:
 186:../Generated_Code/Cpu.c **** 
 187:../Generated_Code/Cpu.c **** 
 188:../Generated_Code/Cpu.c **** 
 189:../Generated_Code/Cpu.c **** /*
 190:../Generated_Code/Cpu.c **** ** ===================================================================
 191:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 192:../Generated_Code/Cpu.c **** **
 193:../Generated_Code/Cpu.c **** **     Description :
 194:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 195:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 196:../Generated_Code/Cpu.c **** **         application initialization code.
 197:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 198:../Generated_Code/Cpu.c **** ** ===================================================================
 199:../Generated_Code/Cpu.c **** */
 200:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 201:../Generated_Code/Cpu.c **** {
 333              		.loc 1 201 0
 334              		.cfi_startproc
 335 0000 80B5     		push	{r7, lr}
 336              	.LCFI6:
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 7, -8
 339              		.cfi_offset 14, -4
 340 0002 00AF     		add	r7, sp, #0
 341              	.LCFI7:
 342              		.cfi_def_cfa_register 7
 202:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 203:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 204:../Generated_Code/Cpu.c ****   #endif
 205:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 206:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 207:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 208:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));                                       
 343              		.loc 1 208 0
 344 0004 3B4B     		ldr	r3, .L12
 345 0006 3B4A     		ldr	r2, .L12
 346 0008 5279     		ldrb	r2, [r2, #5]
 347 000a D2B2     		uxtb	r2, r2
 348 000c 1F21     		mov	r1, #31
 349 000e 8A43     		bic	r2, r1
 350 0010 D2B2     		uxtb	r2, r2
 351 0012 5A71     		strb	r2, [r3, #5]
 209:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 210:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 352              		.loc 1 210 0
 353 0014 374B     		ldr	r3, .L12
 354 0016 374A     		ldr	r2, .L12
 355 0018 1279     		ldrb	r2, [r2, #4]
 356 001a D2B2     		uxtb	r2, r2
 357 001c 0721     		mov	r1, #7
 358 001e 8A43     		bic	r2, r1
 359 0020 D2B2     		uxtb	r2, r2
 360 0022 1A71     		strb	r2, [r3, #4]
 211:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 212:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 213:../Generated_Code/Cpu.c ****               );                                                   
 214:../Generated_Code/Cpu.c ****         /* Initialization of the FTFL_FlashConfig module */
 215:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 216:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 217:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 361              		.loc 1 217 0
 362 0024 344B     		ldr	r3, .L12+4
 363 0026 344A     		ldr	r2, .L12+4
 364 0028 1278     		ldrb	r2, [r2]
 365 002a D2B2     		uxtb	r2, r2
 366 002c D2B2     		uxtb	r2, r2
 367 002e 7321     		mov	r1, #115
 368 0030 8A43     		bic	r2, r1
 369 0032 D2B2     		uxtb	r2, r2
 370 0034 5021     		mov	r1, #80
 371 0036 0A43     		orr	r2, r1
 372 0038 D2B2     		uxtb	r2, r2
 373 003a D2B2     		uxtb	r2, r2
 374 003c 1A70     		strb	r2, [r3]
 218:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 219:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 220:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 221:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 222:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 223:../Generated_Code/Cpu.c ****                ));                                                  
 224:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 225:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 375              		.loc 1 225 0
 376 003e 2E4B     		ldr	r3, .L12+4
 377 0040 2D4A     		ldr	r2, .L12+4
 378 0042 5278     		ldrb	r2, [r2, #1]
 379 0044 D2B2     		uxtb	r2, r2
 380 0046 D2B2     		uxtb	r2, r2
 381 0048 6321     		mov	r1, #99
 382 004a 8A43     		bic	r2, r1
 383 004c D2B2     		uxtb	r2, r2
 384 004e 4021     		mov	r1, #64
 385 0050 0A43     		orr	r2, r1
 386 0052 D2B2     		uxtb	r2, r2
 387 0054 D2B2     		uxtb	r2, r2
 388 0056 5A70     		strb	r2, [r3, #1]
 226:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 227:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 228:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 229:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 230:../Generated_Code/Cpu.c ****                ));                                                  
 231:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 232:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 389              		.loc 1 232 0
 390 0058 274B     		ldr	r3, .L12+4
 391 005a 274A     		ldr	r2, .L12+4
 392 005c 9278     		ldrb	r2, [r2, #2]
 393 005e D2B2     		uxtb	r2, r2
 394 0060 1921     		mov	r1, #25
 395 0062 8A43     		bic	r2, r1
 396 0064 D2B2     		uxtb	r2, r2
 397 0066 9A70     		strb	r2, [r3, #2]
 233:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 234:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 235:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 236:../Generated_Code/Cpu.c ****                );                                                   
 237:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 238:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 398              		.loc 1 238 0
 399 0068 244B     		ldr	r3, .L12+8
 400 006a 0022     		mov	r2, #0
 401 006c 1A70     		strb	r2, [r3]
 239:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 240:../Generated_Code/Cpu.c ****   /* GPIOA_PDDR: PDD&=~0x3000 */
 241:../Generated_Code/Cpu.c ****   GPIOA_PDDR &= (uint32_t)~(uint32_t)(GPIO_PDDR_PDD(0x3000));                                      
 402              		.loc 1 241 0
 403 006e 244B     		ldr	r3, .L12+12
 404 0070 234A     		ldr	r2, .L12+12
 405 0072 5269     		ldr	r2, [r2, #20]
 406 0074 111C     		mov	r1, r2
 407 0076 234A     		ldr	r2, .L12+16
 408 0078 0A40     		and	r2, r1
 409 007a 5A61     		str	r2, [r3, #20]
 242:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 243:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 410              		.loc 1 243 0
 411 007c 224B     		ldr	r3, .L12+20
 412 007e 224A     		ldr	r2, .L12+20
 413 0080 126D     		ldr	r2, [r2, #80]
 414 0082 111C     		mov	r1, r2
 415 0084 214A     		ldr	r2, .L12+24
 416 0086 0A40     		and	r2, r1
 417 0088 E021     		mov	r1, #224
 418 008a C900     		lsl	r1, r1, #3
 419 008c 0A43     		orr	r2, r1
 420 008e 1A65     		str	r2, [r3, #80]
 244:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 245:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 246:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 247:../Generated_Code/Cpu.c ****                 ));                                                  
 248:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 249:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));                                         
 421              		.loc 1 249 0
 422 0090 1F4A     		ldr	r2, .L12+28
 423 0092 1F49     		ldr	r1, .L12+28
 424 0094 C123     		mov	r3, #193
 425 0096 9B00     		lsl	r3, r3, #2
 426 0098 CB58     		ldr	r3, [r1, r3]
 427 009a 191C     		mov	r1, r3
 428 009c 1D4B     		ldr	r3, .L12+32
 429 009e 1940     		and	r1, r3
 430 00a0 C123     		mov	r3, #193
 431 00a2 9B00     		lsl	r3, r3, #2
 432 00a4 D150     		str	r1, [r2, r3]
 250:../Generated_Code/Cpu.c ****   /* ### Serial_LDD "IO1" component auto initialization. Auto initialization feature can be disable
 251:../Generated_Code/Cpu.c ****   (void)IO1_Init(NULL);
 433              		.loc 1 251 0
 434 00a6 0020     		mov	r0, #0
 435 00a8 FFF7FEFF 		bl	IO1_Init
 252:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd3" component auto initialization. Auto initialization feature can be disabl
 253:../Generated_Code/Cpu.c ****   (void)PwmLdd3_Init(NULL);
 436              		.loc 1 253 0
 437 00ac 0020     		mov	r0, #0
 438 00ae FFF7FEFF 		bl	PwmLdd3_Init
 254:../Generated_Code/Cpu.c ****   /* ### PWM "MotorLeft_PTE30" init code ... */
 255:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd2" component auto initialization. Auto initialization feature can be disabl
 256:../Generated_Code/Cpu.c ****   (void)PwmLdd2_Init(NULL);
 439              		.loc 1 256 0
 440 00b2 0020     		mov	r0, #0
 441 00b4 FFF7FEFF 		bl	PwmLdd2_Init
 257:../Generated_Code/Cpu.c ****   /* ### PWM "MotorRight_PTA5" init code ... */
 258:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd4" component auto initialization. Auto initialization feature can be disabl
 259:../Generated_Code/Cpu.c ****   (void)PwmLdd4_Init(NULL);
 442              		.loc 1 259 0
 443 00b8 0020     		mov	r0, #0
 444 00ba FFF7FEFF 		bl	PwmLdd4_Init
 260:../Generated_Code/Cpu.c ****   /* ### PWM "MotorLeft_PTE31" init code ... */
 261:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd1" component auto initialization. Auto initialization feature can be disabl
 262:../Generated_Code/Cpu.c ****   (void)PwmLdd1_Init(NULL);
 445              		.loc 1 262 0
 446 00be 0020     		mov	r0, #0
 447 00c0 FFF7FEFF 		bl	PwmLdd1_Init
 263:../Generated_Code/Cpu.c ****   /* ### PWM "MotorRight_PTA4" init code ... */
 264:../Generated_Code/Cpu.c ****   /* ### ADC "AD1" init code ... */
 265:../Generated_Code/Cpu.c ****   AD1_Init();
 448              		.loc 1 265 0
 449 00c4 FFF7FEFF 		bl	AD1_Init
 266:../Generated_Code/Cpu.c ****   /* ### GPIO_LDD "BitsIoLdd1" component auto initialization. Auto initialization feature can be di
 267:../Generated_Code/Cpu.c ****   (void)BitsIoLdd1_Init(NULL);
 450              		.loc 1 267 0
 451 00c8 0020     		mov	r0, #0
 452 00ca FFF7FEFF 		bl	BitsIoLdd1_Init
 268:../Generated_Code/Cpu.c ****   /* ### GPIO_LDD "BitsIoLdd2" component auto initialization. Auto initialization feature can be di
 269:../Generated_Code/Cpu.c ****   (void)BitsIoLdd2_Init(NULL);
 453              		.loc 1 269 0
 454 00ce 0020     		mov	r0, #0
 455 00d0 FFF7FEFF 		bl	BitsIoLdd2_Init
 270:../Generated_Code/Cpu.c ****   /* ### ExtInt_LDD "ExtIntLdd1" component auto initialization. Auto initialization feature can be 
 271:../Generated_Code/Cpu.c ****   (void)ExtIntLdd1_Init(NULL);
 456              		.loc 1 271 0
 457 00d4 0020     		mov	r0, #0
 458 00d6 FFF7FEFF 		bl	ExtIntLdd1_Init
 272:../Generated_Code/Cpu.c ****   /* ### ExtInt_LDD "ExtIntLdd2" component auto initialization. Auto initialization feature can be 
 273:../Generated_Code/Cpu.c ****   (void)ExtIntLdd2_Init(NULL);
 459              		.loc 1 273 0
 460 00da 0020     		mov	r0, #0
 461 00dc FFF7FEFF 		bl	ExtIntLdd2_Init
 274:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd1" component auto initialization. Auto initialization feature can be di
 275:../Generated_Code/Cpu.c ****   (void)BitIoLdd1_Init(NULL);
 462              		.loc 1 275 0
 463 00e0 0020     		mov	r0, #0
 464 00e2 FFF7FEFF 		bl	BitIoLdd1_Init
 276:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd5" component auto initialization. Auto initialization feature can be disabl
 277:../Generated_Code/Cpu.c ****   (void)PwmLdd5_Init(NULL);
 465              		.loc 1 277 0
 466 00e6 0020     		mov	r0, #0
 467 00e8 FFF7FEFF 		bl	PwmLdd5_Init
 278:../Generated_Code/Cpu.c ****   /* ### PWM "Servo_Video1" init code ... */
 279:../Generated_Code/Cpu.c ****   __EI();
 468              		.loc 1 279 0
 469              	@ 279 "../Generated_Code/Cpu.c" 1
 470 00ec 62B6     		CPSIE i
 471              	@ 0 "" 2
 280:../Generated_Code/Cpu.c **** }
 472              		.loc 1 280 0
 473              		.code	16
 474 00ee BD46     		mov	sp, r7
 475              		@ sp needed for prologue
 476 00f0 80BD     		pop	{r7, pc}
 477              	.L13:
 478 00f2 C046     		.align	2
 479              	.L12:
 480 00f4 00F00740 		.word	1074262016
 481 00f8 00D00740 		.word	1074253824
 482 00fc 00E00740 		.word	1074257920
 483 0100 00F00F40 		.word	1074786304
 484 0104 FFCFFFFF 		.word	-12289
 485 0108 00900440 		.word	1074040832
 486 010c FFF8FFFE 		.word	-16779009
 487 0110 00E100E0 		.word	-536813312
 488 0114 FFFF00FF 		.word	-16711681
 489              		.cfi_endproc
 490              	.LFE3:
 492              		.global	_cfm
 493              		.section	.cfmconfig,"a",%progbits
 494              		.align	2
 497              	_cfm:
 498 0000 FF       		.byte	-1
 499 0001 FF       		.byte	-1
 500 0002 FF       		.byte	-1
 501 0003 FF       		.byte	-1
 502 0004 FF       		.byte	-1
 503 0005 FF       		.byte	-1
 504 0006 FF       		.byte	-1
 505 0007 FF       		.byte	-1
 506 0008 FF       		.byte	-1
 507 0009 FF       		.byte	-1
 508 000a FF       		.byte	-1
 509 000b FF       		.byte	-1
 510 000c 7E       		.byte	126
 511 000d FF       		.byte	-1
 512 000e FF       		.byte	-1
 513 000f FF       		.byte	-1
 514              		.text
 515              	.Letext0:
 516              		.file 2 "C:/Freescale/CW MCU v10.3/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 517              		.file 3 "../Generated_Code/IO_Map.h"
 518              		.file 4 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:22     .bss.SR_lock:00000000 SR_lock
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:23     .bss.SR_lock:00000000 $d
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:25     .text.Cpu_ivINT_PORTA:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:30     .text.Cpu_ivINT_PORTA:00000000 Cpu_ivINT_PORTA
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:55     .text.Cpu_Interrupt:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:60     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:85     .text.__init_hardware:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:90     .text.__init_hardware:00000000 __init_hardware
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:310    .text.__init_hardware:0000014c $d
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:326    .text.PE_low_level_init:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:331    .text.PE_low_level_init:00000000 PE_low_level_init
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:480    .text.PE_low_level_init:000000f4 $d
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:497    .cfmconfig:00000000 _cfm
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccz2XXDR.s:494    .cfmconfig:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ExtIntLdd1_Interrupt
ExtIntLdd2_Interrupt
__vect_table
IO1_Init
PwmLdd3_Init
PwmLdd2_Init
PwmLdd4_Init
PwmLdd1_Init
AD1_Init
BitsIoLdd1_Init
BitsIoLdd2_Init
ExtIntLdd1_Init
ExtIntLdd2_Init
BitIoLdd1_Init
PwmLdd5_Init
