/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : USB1.h
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Component   : FSL_USB_Stack
**     Version     : Component 01.008, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2012-10-25, 00:17, # CodeGen: 17
**     Abstract    :
**
**     Settings    :
**
**     Contents    :
**         GetFreeInTxBuf   - word USB1_GetFreeInTxBuf(void);
**         GetCharsInTxBuf  - word USB1_GetCharsInTxBuf(void);
**         GetCharsInRxBuf  - word USB1_GetCharsInRxBuf(void);
**         GetChar          - byte USB1_GetChar(USB1_TComData *Chr);
**         RecvChar         - byte USB1_RecvChar(USB1_TComData *Chr);
**         SendChar         - byte USB1_SendChar(USB1_TComData Chr);
**         SendString       - byte USB1_SendString(USB1_TComData *Chr);
**         PutBufferChecked - byte USB1_PutBufferChecked(byte *buf, size_t bufSize);
**         App_Task         - byte USB1_App_Task(byte *txBuf, size_t txBufSize);
**         Init             - byte USB1_Init(void);
**
**     (c) Copyright Freescale, all rights reserved, 2012
**     Ported as Processor Expert component: Erich Styger
**     http: www.freescale.com
** ###################################################################*/

#ifndef __USB1_H
#define __USB1_H

/* MODULE USB1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "USBInit1.h"
#include "Tx1.h"
#include "Rx1.h"
#include <stddef.h> /* for size_t */

#include "Cpu.h"


#ifndef __BWUserType_USB1_TComData
#define __BWUserType_USB1_TComData
  typedef byte USB1_TComData ;         /* User type for communication data type. */
#endif

/*
   DATA_BUFF_SIZE should be greater than or equal to the endpoint buffer size,
   otherwise there will be data loss. For MC9S08JS16, maximum DATA_BUFF_SIZE
   supported is 16 Bytes
*/
#define USB1_DATA_BUFF_SIZE    64

#define USB1_USB_ERR_SEND            1  /* Error while sending */
#define USB1_USB_ERR_BUSOFF          2  /* Bus not ready */
#define USB1_USB_ERR_INIT            3  /* USB initialization error */
#define USB1_USB_ERR_TX_CHAR         4  /* Error sending character */
#define USB1_USB_ERR_TX_STRING       5  /* Error sending string */
#define USB1_USB_ERR_CHECKED_TXFULL  6  /* Error during sending a checked block */
#define USB1_USB_ERR_RECEIVE         7  /* Error while starting an receive transaction */

#define USB1_GetFreeInTxBuf() \
  Tx1_NofFreeElements()
/*
** ===================================================================
**     Method      :  USB1_GetFreeInTxBuf (component FSL_USB_Stack)
**
**     Description :
**         Returns the number of free character in the send buffer
**     Parameters  : None
**     Returns     :
**         ---             - Number of free character in the receive
**                           buffer.
** ===================================================================
*/

byte USB1_RecvChar(USB1_TComData *Chr);
/*
** ===================================================================
**     Method      :  USB1_RecvChar (component FSL_USB_Stack)
**
**     Description :
**         Receives a character from the USB interface. Function is
**         blocking if there is no character in the input buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to where to store the character
**                           received
**     Returns     :
**         ---             - Error code, ERR_OK for success,
**                           ERR_RXEMPTY if nothing is in RX buffer.
** ===================================================================
*/

byte USB1_SendChar(USB1_TComData Chr);
/*
** ===================================================================
**     Method      :  USB1_SendChar (component FSL_USB_Stack)
**
**     Description :
**         Method to send a character to the USB interface. Method is
**         non-blocking: If the output buffer is full, it tries to send
**         it over USB. If this fails or buffer is still full, the
**         character will be lost. If OnError() event is enabled, the
**         error event will be called in case of error.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send.
**     Returns     :
**         ---             - Error code. ERR_OK for success and
**                           ERR_FAILED otherwise.
** ===================================================================
*/

#define USB1_GetCharsInTxBuf() \
  Tx1_NofElements()
/*
** ===================================================================
**     Method      :  USB1_GetCharsInTxBuf (component FSL_USB_Stack)
**
**     Description :
**         Returns the number of character in the send buffer
**     Parameters  : None
**     Returns     :
**         ---             - Number of character in the receive buffer.
** ===================================================================
*/

#define USB1_GetCharsInRxBuf() \
  Rx1_NofElements()
/*
** ===================================================================
**     Method      :  USB1_GetCharsInRxBuf (component FSL_USB_Stack)
**
**     Description :
**         Returns the number of character in the receive buffer
**     Parameters  : None
**     Returns     :
**         ---             - Number of character in the receive buffer.
** ===================================================================
*/

byte USB1_Init(void);
/*
** ===================================================================
**     Method      :  USB1_Init (component FSL_USB_Stack)
**
**     Description :
**         Initializes the driver
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte USB1_App_Task(byte *txBuf, size_t txBufSize);
/*
** ===================================================================
**     Method      :  USB1_App_Task (component FSL_USB_Stack)
**
**     Description :
**         Application task to be called periodically from the main
**         task.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * txBuf           - Pointer to temporary buffer used to
**                           transmit data over USB. Should be equal or
**                           greater than the endpoint buffer size. Data
**                           will be sent in an asynchronous way, so
**                           make sure the buffer is *not* on the stack.
**                           This buffer must be available until the
**                           next transmission.
**         txBufSize       - Size of the buffer in bytes
**     Returns     :
**         ---             - Error code, returns ERR_OK if USB
**                           enumeration has been finished, error code
**                           otherwise.
** ===================================================================
*/

byte USB1_SendString(USB1_TComData *Chr);
/*
** ===================================================================
**     Method      :  USB1_SendString (component FSL_USB_Stack)
**
**     Description :
**         Method to send a string to the USB interface. Method is
**         non-blocking: if string cannot be sent, it will be lost. If
**         OnError() event is enabled, the error event will be called
**         in case of error.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to string to send.
**     Returns     :
**         ---             - Error code. ERR_OK for success and
**                           ERR_FAILED otherwise.
** ===================================================================
*/

#define USB1_GetChar(Chr) \
  Rx1_Get(Chr)

/*
** ===================================================================
**     Method      :  USB1_GetChar (component FSL_USB_Stack)
**
**     Description :
**         Receives a character from the USB interface. Function is not
**         blocking if there is no character in the input buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to where to store the character
**                           received
**     Returns     :
**         ---             - Error code, ERR_OK for success,
**                           ERR_RXEMPTY if nothing is in RX buffer.
** ===================================================================
*/

byte USB1_PutBufferChecked(byte *buf, size_t bufSize);
/*
** ===================================================================
**     Method      :  USB1_PutBufferChecked (component FSL_USB_Stack)
**
**     Description :
**         Puts a data block into the output buffer, but does not send
**         it. If there is not enough size available, then ERR_TXFULL
**         is returned, otherwise ERR_OK. The application then needs to
**         call USB_App_Callback() to actually send the buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * buf             - Pointer to buffer to be sent
**         bufsize         - Buffer size in bytes
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void USB1_usb_int_dis(void);
/*
** ===================================================================
**     Method      :  USB1_usb_int_dis (component FSL_USB_Stack)
**
**     Description :
**         Disables USB interrupts (if supported)
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void USB1_usb_int_en(void);
/*
** ===================================================================
**     Method      :  USB1_usb_int_en (component FSL_USB_Stack)
**
**     Description :
**         Enables USB interrupts (if supported).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END USB1. */

#endif
/* ifndef __USB1_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
