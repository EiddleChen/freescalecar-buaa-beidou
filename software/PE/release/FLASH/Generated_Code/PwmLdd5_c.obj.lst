   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PwmLdd5.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	12
  22      00000000 
  22      00000000 
  23              		.section	.text.PwmLdd5_Init,"ax",%progbits
  24              		.align	2
  25              		.global	PwmLdd5_Init
  26              		.code	16
  27              		.thumb_func
  29              	PwmLdd5_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/PwmLdd5.c"
   1:../Generated_Code/PwmLdd5.c **** /** ###################################################################
   2:../Generated_Code/PwmLdd5.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/PwmLdd5.c **** **     Filename    : PwmLdd5.c
   4:../Generated_Code/PwmLdd5.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/PwmLdd5.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/PwmLdd5.c **** **     Component   : PWM_LDD
   7:../Generated_Code/PwmLdd5.c **** **     Version     : Component 01.000, Driver 01.00, CPU db: 3.00.000
   8:../Generated_Code/PwmLdd5.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/PwmLdd5.c **** **     Date/Time   : 2013-05-26, 21:44, # CodeGen: 88
  10:../Generated_Code/PwmLdd5.c **** **     Abstract    :
  11:../Generated_Code/PwmLdd5.c **** **          This component implements a pulse-width modulation generator
  12:../Generated_Code/PwmLdd5.c **** **          that generates signal with variable duty and fixed cycle.
  13:../Generated_Code/PwmLdd5.c **** **          This PWM component provides a high level API for unified
  14:../Generated_Code/PwmLdd5.c **** **          hardware access to various timer devices using the TimerUnit
  15:../Generated_Code/PwmLdd5.c **** **          component.
  16:../Generated_Code/PwmLdd5.c **** **     Settings    :
  17:../Generated_Code/PwmLdd5.c **** **          Component name                                 : PwmLdd5
  18:../Generated_Code/PwmLdd5.c **** **          Period device                                  : TPM1_MOD
  19:../Generated_Code/PwmLdd5.c **** **          Duty device                                    : TPM1_C0V
  20:../Generated_Code/PwmLdd5.c **** **          Output pin                                     : ADC0_SE8/TSI0_CH0/PTB0/LLWU_P5/I2C0_SC
  21:../Generated_Code/PwmLdd5.c **** **          Output pin signal                              : 
  22:../Generated_Code/PwmLdd5.c **** **          Counter                                        : TPM1_CNT
  23:../Generated_Code/PwmLdd5.c **** **          Linked TimerUnit                               : TU2
  24:../Generated_Code/PwmLdd5.c **** **          Interrupt service/event                        : Enabled
  25:../Generated_Code/PwmLdd5.c **** **            Interrupt                                    : INT_TPM1
  26:../Generated_Code/PwmLdd5.c **** **            Interrupt priority                           : medium priority
  27:../Generated_Code/PwmLdd5.c **** **            Iterations before action/event               : 1
  28:../Generated_Code/PwmLdd5.c **** **          Period                                         : 12 ms
  29:../Generated_Code/PwmLdd5.c **** **          Starting pulse width                           : 1 ms
  30:../Generated_Code/PwmLdd5.c **** **          Initial polarity                               : low
  31:../Generated_Code/PwmLdd5.c **** **          Initialization                                 : 
  32:../Generated_Code/PwmLdd5.c **** **            Enabled in init. code                        : yes
  33:../Generated_Code/PwmLdd5.c **** **            Auto initialization                          : yes
  34:../Generated_Code/PwmLdd5.c **** **            Event mask                                   : 
  35:../Generated_Code/PwmLdd5.c **** **              OnEnd                                      : Enabled
  36:../Generated_Code/PwmLdd5.c **** **          CPU clock/configuration selection              : 
  37:../Generated_Code/PwmLdd5.c **** **            Clock configuration 0                        : This component enabled
  38:../Generated_Code/PwmLdd5.c **** **            Clock configuration 1                        : This component disabled
  39:../Generated_Code/PwmLdd5.c **** **            Clock configuration 2                        : This component disabled
  40:../Generated_Code/PwmLdd5.c **** **            Clock configuration 3                        : This component enabled
  41:../Generated_Code/PwmLdd5.c **** **            Clock configuration 4                        : This component enabled
  42:../Generated_Code/PwmLdd5.c **** **            Clock configuration 5                        : This component enabled
  43:../Generated_Code/PwmLdd5.c **** **            Clock configuration 6                        : This component enabled
  44:../Generated_Code/PwmLdd5.c **** **            Clock configuration 7                        : This component enabled
  45:../Generated_Code/PwmLdd5.c **** **     Contents    :
  46:../Generated_Code/PwmLdd5.c **** **         Init       - LDD_TDeviceData* PwmLdd5_Init(LDD_TUserData *UserDataPtr);
  47:../Generated_Code/PwmLdd5.c **** **         Deinit     - void PwmLdd5_Deinit(LDD_TDeviceData *DeviceDataPtr);
  48:../Generated_Code/PwmLdd5.c **** **         SetRatio16 - LDD_TError PwmLdd5_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Rati
  49:../Generated_Code/PwmLdd5.c **** **         SetDutyUS  - LDD_TError PwmLdd5_SetDutyUS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
  50:../Generated_Code/PwmLdd5.c **** **         SetDutyMS  - LDD_TError PwmLdd5_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
  51:../Generated_Code/PwmLdd5.c **** **
  52:../Generated_Code/PwmLdd5.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  53:../Generated_Code/PwmLdd5.c **** **     
  54:../Generated_Code/PwmLdd5.c **** **     http      : www.freescale.com
  55:../Generated_Code/PwmLdd5.c **** **     mail      : support@freescale.com
  56:../Generated_Code/PwmLdd5.c **** ** ###################################################################*/
  57:../Generated_Code/PwmLdd5.c **** 
  58:../Generated_Code/PwmLdd5.c **** /* MODULE PwmLdd5. */
  59:../Generated_Code/PwmLdd5.c **** 
  60:../Generated_Code/PwmLdd5.c **** #include "Servo_Video1.h"
  61:../Generated_Code/PwmLdd5.c **** #include "PwmLdd5.h"
  62:../Generated_Code/PwmLdd5.c **** /* {Default RTOS Adapter} No RTOS includes */
  63:../Generated_Code/PwmLdd5.c **** 
  64:../Generated_Code/PwmLdd5.c **** typedef struct {
  65:../Generated_Code/PwmLdd5.c ****   LDD_TDeviceData *LinkedDeviceDataPtr;
  66:../Generated_Code/PwmLdd5.c ****   bool EnUser;                         /* Enable/Disable device */
  67:../Generated_Code/PwmLdd5.c ****   uint16_t RatioStore;                 /* Ratio of L-level to H-level */
  68:../Generated_Code/PwmLdd5.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
  69:../Generated_Code/PwmLdd5.c **** } PwmLdd5_TDeviceData;
  70:../Generated_Code/PwmLdd5.c **** 
  71:../Generated_Code/PwmLdd5.c **** typedef PwmLdd5_TDeviceData *PwmLdd5_TDeviceDataPtr; /* Pointer to the device data structure. */
  72:../Generated_Code/PwmLdd5.c **** 
  73:../Generated_Code/PwmLdd5.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  74:../Generated_Code/PwmLdd5.c **** static PwmLdd5_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  75:../Generated_Code/PwmLdd5.c **** 
  76:../Generated_Code/PwmLdd5.c **** #define CHANNEL 0x00U
  77:../Generated_Code/PwmLdd5.c **** #define AVAILABLE_EVENTS_MASK (LDD_TEventMask)(LDD_PWM_ON_END)
  78:../Generated_Code/PwmLdd5.c **** /* Internal method prototypes */
  79:../Generated_Code/PwmLdd5.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr);
  80:../Generated_Code/PwmLdd5.c **** /*
  81:../Generated_Code/PwmLdd5.c **** ** ===================================================================
  82:../Generated_Code/PwmLdd5.c **** **     Method      :  PwmLdd5_Init (component PWM_LDD)
  83:../Generated_Code/PwmLdd5.c **** **
  84:../Generated_Code/PwmLdd5.c **** **     Description :
  85:../Generated_Code/PwmLdd5.c **** **         Initializes the device. Allocates memory for the device data
  86:../Generated_Code/PwmLdd5.c **** **         structure, allocates interrupt vectors and sets interrupt
  87:../Generated_Code/PwmLdd5.c **** **         priority, sets pin routing, sets timing, etc. If the
  88:../Generated_Code/PwmLdd5.c **** **         property <"Enable in init. code"> is set to "yes" value then
  89:../Generated_Code/PwmLdd5.c **** **         the device is also enabled (see the description of the
  90:../Generated_Code/PwmLdd5.c **** **         <Enable> method). In this case the <Enable> method is not
  91:../Generated_Code/PwmLdd5.c **** **         necessary and needn't to be generated. This method can be
  92:../Generated_Code/PwmLdd5.c **** **         called only once. Before the second call of Init the <Deinit>
  93:../Generated_Code/PwmLdd5.c **** **         must be called first.
  94:../Generated_Code/PwmLdd5.c **** **     Parameters  :
  95:../Generated_Code/PwmLdd5.c **** **         NAME            - DESCRIPTION
  96:../Generated_Code/PwmLdd5.c **** **       * UserDataPtr     - Pointer to the user or
  97:../Generated_Code/PwmLdd5.c **** **                           RTOS specific data. This pointer will be
  98:../Generated_Code/PwmLdd5.c **** **                           passed as an event or callback parameter.
  99:../Generated_Code/PwmLdd5.c **** **     Returns     :
 100:../Generated_Code/PwmLdd5.c **** **         ---             - Pointer to the dynamically allocated
 101:../Generated_Code/PwmLdd5.c **** **                           private structure or NULL if there was an
 102:../Generated_Code/PwmLdd5.c **** **                           error.
 103:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 104:../Generated_Code/PwmLdd5.c **** */
 105:../Generated_Code/PwmLdd5.c **** LDD_TDeviceData* PwmLdd5_Init(LDD_TUserData *UserDataPtr)
 106:../Generated_Code/PwmLdd5.c **** {
  32              		.loc 1 106 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 107:../Generated_Code/PwmLdd5.c ****   /* Allocate device structure */
 108:../Generated_Code/PwmLdd5.c ****   PwmLdd5_TDeviceData *DeviceDataPrv;
 109:../Generated_Code/PwmLdd5.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 110:../Generated_Code/PwmLdd5.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  46              		.loc 1 110 0
  47 0008 0F4B     		ldr	r3, .L4
  48 000a FB60     		str	r3, [r7, #12]
 111:../Generated_Code/PwmLdd5.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  49              		.loc 1 111 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 7A68     		ldr	r2, [r7, #4]
  52 0010 9A60     		str	r2, [r3, #8]
 112:../Generated_Code/PwmLdd5.c ****   DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
  53              		.loc 1 112 0
  54 0012 FB68     		ldr	r3, [r7, #12]
  55 0014 0122     		mov	r2, #1
  56 0016 1A71     		strb	r2, [r3, #4]
 113:../Generated_Code/PwmLdd5.c ****   DeviceDataPrv->RatioStore = 0x1562U; /* Ratio after initialization */
  57              		.loc 1 113 0
  58 0018 FB68     		ldr	r3, [r7, #12]
  59 001a 0C4A     		ldr	r2, .L4+4
  60 001c DA80     		strh	r2, [r3, #6]
 114:../Generated_Code/PwmLdd5.c ****   DeviceDataPrv->LinkedDeviceDataPtr = TU2_Init((LDD_TUserData *)NULL);
  61              		.loc 1 114 0
  62 001e 0020     		mov	r0, #0
  63 0020 FFF7FEFF 		bl	TU2_Init
  64 0024 021C     		mov	r2, r0
  65 0026 FB68     		ldr	r3, [r7, #12]
  66 0028 1A60     		str	r2, [r3]
 115:../Generated_Code/PwmLdd5.c ****   if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful?
  67              		.loc 1 115 0
  68 002a FB68     		ldr	r3, [r7, #12]
  69 002c 1B68     		ldr	r3, [r3]
  70 002e 002B     		cmp	r3, #0
  71 0030 01D1     		bne	.L2
 116:../Generated_Code/PwmLdd5.c ****     /* Deallocation of the device structure */
 117:../Generated_Code/PwmLdd5.c ****     /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deall
 118:../Generated_Code/PwmLdd5.c ****     return NULL;                       /* If so, then the PWM initialization is also unsuccessful *
  72              		.loc 1 118 0
  73 0032 0023     		mov	r3, #0
  74 0034 03E0     		b	.L3
  75              	.L2:
 119:../Generated_Code/PwmLdd5.c ****   }
 120:../Generated_Code/PwmLdd5.c ****   /* Registration of the device structure */
 121:../Generated_Code/PwmLdd5.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd5_ID,DeviceDataPrv);
  76              		.loc 1 121 0
  77 0036 064B     		ldr	r3, .L4+8
  78 0038 FA68     		ldr	r2, [r7, #12]
  79 003a DA63     		str	r2, [r3, #60]
 122:../Generated_Code/PwmLdd5.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  80              		.loc 1 122 0
  81 003c FB68     		ldr	r3, [r7, #12]
  82              	.L3:
 123:../Generated_Code/PwmLdd5.c **** }
  83              		.loc 1 123 0
  84 003e 181C     		mov	r0, r3
  85 0040 BD46     		mov	sp, r7
  86 0042 04B0     		add	sp, sp, #16
  87              		@ sp needed for prologue
  88 0044 80BD     		pop	{r7, pc}
  89              	.L5:
  90 0046 C046     		.align	2
  91              	.L4:
  92 0048 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
  93 004c 62150000 		.word	5474
  94 0050 00000000 		.word	PE_LDD_DeviceDataList
  95              		.cfi_endproc
  96              	.LFE0:
  98              		.section	.text.PwmLdd5_Deinit,"ax",%progbits
  99              		.align	2
 100              		.global	PwmLdd5_Deinit
 101              		.code	16
 102              		.thumb_func
 104              	PwmLdd5_Deinit:
 105              	.LFB1:
 124:../Generated_Code/PwmLdd5.c **** 
 125:../Generated_Code/PwmLdd5.c **** /*
 126:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 127:../Generated_Code/PwmLdd5.c **** **     Method      :  PwmLdd5_Deinit (component PWM_LDD)
 128:../Generated_Code/PwmLdd5.c **** **
 129:../Generated_Code/PwmLdd5.c **** **     Description :
 130:../Generated_Code/PwmLdd5.c **** **         Deinitializes the device. Switches off the device, frees the
 131:../Generated_Code/PwmLdd5.c **** **         device data structure memory, interrupts vectors, etc.
 132:../Generated_Code/PwmLdd5.c **** **     Parameters  :
 133:../Generated_Code/PwmLdd5.c **** **         NAME            - DESCRIPTION
 134:../Generated_Code/PwmLdd5.c **** **       * DeviceDataPtr   - Device data structure
 135:../Generated_Code/PwmLdd5.c **** **                           pointer returned by Init method
 136:../Generated_Code/PwmLdd5.c **** **     Returns     : Nothing
 137:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 138:../Generated_Code/PwmLdd5.c **** */
 139:../Generated_Code/PwmLdd5.c **** void PwmLdd5_Deinit(LDD_TDeviceData *DeviceDataPtr)
 140:../Generated_Code/PwmLdd5.c **** {
 106              		.loc 1 140 0
 107              		.cfi_startproc
 108 0000 80B5     		push	{r7, lr}
 109              	.LCFI3:
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113 0002 84B0     		sub	sp, sp, #16
 114              	.LCFI4:
 115              		.cfi_def_cfa_offset 24
 116 0004 00AF     		add	r7, sp, #0
 117              	.LCFI5:
 118              		.cfi_def_cfa_register 7
 119 0006 7860     		str	r0, [r7, #4]
 141:../Generated_Code/PwmLdd5.c ****   PwmLdd5_TDeviceData *DeviceDataPrv = (PwmLdd5_TDeviceData *)DeviceDataPtr;
 120              		.loc 1 141 0
 121 0008 7B68     		ldr	r3, [r7, #4]
 122 000a FB60     		str	r3, [r7, #12]
 142:../Generated_Code/PwmLdd5.c **** 
 143:../Generated_Code/PwmLdd5.c ****   TU2_Deinit(DeviceDataPrv->LinkedDeviceDataPtr);
 123              		.loc 1 143 0
 124 000c FB68     		ldr	r3, [r7, #12]
 125 000e 1B68     		ldr	r3, [r3]
 126 0010 181C     		mov	r0, r3
 127 0012 FFF7FEFF 		bl	TU2_Deinit
 144:../Generated_Code/PwmLdd5.c ****   /* Unregistration of the device structure */
 145:../Generated_Code/PwmLdd5.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd5_ID);
 128              		.loc 1 145 0
 129 0016 034B     		ldr	r3, .L7
 130 0018 0022     		mov	r2, #0
 131 001a DA63     		str	r2, [r3, #60]
 146:../Generated_Code/PwmLdd5.c ****   /* Deallocation of the device structure */
 147:../Generated_Code/PwmLdd5.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 148:../Generated_Code/PwmLdd5.c **** }
 132              		.loc 1 148 0
 133 001c BD46     		mov	sp, r7
 134 001e 04B0     		add	sp, sp, #16
 135              		@ sp needed for prologue
 136 0020 80BD     		pop	{r7, pc}
 137              	.L8:
 138 0022 C046     		.align	2
 139              	.L7:
 140 0024 00000000 		.word	PE_LDD_DeviceDataList
 141              		.cfi_endproc
 142              	.LFE1:
 144              		.section	.text.PwmLdd5_SetRatio16,"ax",%progbits
 145              		.align	2
 146              		.global	PwmLdd5_SetRatio16
 147              		.code	16
 148              		.thumb_func
 150              	PwmLdd5_SetRatio16:
 151              	.LFB2:
 149:../Generated_Code/PwmLdd5.c **** 
 150:../Generated_Code/PwmLdd5.c **** /*
 151:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 152:../Generated_Code/PwmLdd5.c **** **     Method      :  PwmLdd5_SetRatio16 (component PWM_LDD)
 153:../Generated_Code/PwmLdd5.c **** **
 154:../Generated_Code/PwmLdd5.c **** **     Description :
 155:../Generated_Code/PwmLdd5.c **** **         This method sets a new duty-cycle ratio. Ratio is expressed
 156:../Generated_Code/PwmLdd5.c **** **         as a 16-bit unsigned integer number. 0 - FFFF value is
 157:../Generated_Code/PwmLdd5.c **** **         proportional to ratio 0 - 100%. The method is available
 158:../Generated_Code/PwmLdd5.c **** **         only if it is not selected list of predefined values in
 159:../Generated_Code/PwmLdd5.c **** **         <Starting pulse width> property. 
 160:../Generated_Code/PwmLdd5.c **** **         Note: Calculated duty depends on the timer possibilities and
 161:../Generated_Code/PwmLdd5.c **** **         on the selected period.
 162:../Generated_Code/PwmLdd5.c **** **     Parameters  :
 163:../Generated_Code/PwmLdd5.c **** **         NAME            - DESCRIPTION
 164:../Generated_Code/PwmLdd5.c **** **       * DeviceDataPtr   - Device data structure
 165:../Generated_Code/PwmLdd5.c **** **                           pointer returned by <Init> method.
 166:../Generated_Code/PwmLdd5.c **** **         Ratio           - Ratio to set. 0 - 65535 value is
 167:../Generated_Code/PwmLdd5.c **** **                           proportional to ratio 0 - 100%
 168:../Generated_Code/PwmLdd5.c **** **     Returns     :
 169:../Generated_Code/PwmLdd5.c **** **         ---             - Error code, possible codes:
 170:../Generated_Code/PwmLdd5.c **** **                           ERR_OK - OK
 171:../Generated_Code/PwmLdd5.c **** **                           ERR_SPEED - The component does not work in
 172:../Generated_Code/PwmLdd5.c **** **                           the active clock configuration
 173:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 174:../Generated_Code/PwmLdd5.c **** */
 175:../Generated_Code/PwmLdd5.c **** LDD_TError PwmLdd5_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio)
 176:../Generated_Code/PwmLdd5.c **** {
 152              		.loc 1 176 0
 153              		.cfi_startproc
 154 0000 80B5     		push	{r7, lr}
 155              	.LCFI6:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 7, -8
 158              		.cfi_offset 14, -4
 159 0002 84B0     		sub	sp, sp, #16
 160              	.LCFI7:
 161              		.cfi_def_cfa_offset 24
 162 0004 00AF     		add	r7, sp, #0
 163              	.LCFI8:
 164              		.cfi_def_cfa_register 7
 165 0006 7860     		str	r0, [r7, #4]
 166 0008 0A1C     		mov	r2, r1
 167 000a BB1C     		add	r3, r7, #2
 168 000c 1A80     		strh	r2, [r3]
 177:../Generated_Code/PwmLdd5.c ****   PwmLdd5_TDeviceData *DeviceDataPrv = (PwmLdd5_TDeviceData *)DeviceDataPtr;
 169              		.loc 1 177 0
 170 000e 7B68     		ldr	r3, [r7, #4]
 171 0010 FB60     		str	r3, [r7, #12]
 178:../Generated_Code/PwmLdd5.c **** 
 179:../Generated_Code/PwmLdd5.c ****   DeviceDataPrv->RatioStore = Ratio;   /* Store new value of the ratio */
 172              		.loc 1 179 0
 173 0012 FB68     		ldr	r3, [r7, #12]
 174 0014 BA1C     		add	r2, r7, #2
 175 0016 1288     		ldrh	r2, [r2]
 176 0018 DA80     		strh	r2, [r3, #6]
 180:../Generated_Code/PwmLdd5.c ****   SetRatio(DeviceDataPrv);
 177              		.loc 1 180 0
 178 001a FB68     		ldr	r3, [r7, #12]
 179 001c 181C     		mov	r0, r3
 180 001e FFF7FEFF 		bl	SetRatio
 181:../Generated_Code/PwmLdd5.c ****   return ERR_OK;
 181              		.loc 1 181 0
 182 0022 0023     		mov	r3, #0
 182:../Generated_Code/PwmLdd5.c **** }
 183              		.loc 1 182 0
 184 0024 181C     		mov	r0, r3
 185 0026 BD46     		mov	sp, r7
 186 0028 04B0     		add	sp, sp, #16
 187              		@ sp needed for prologue
 188 002a 80BD     		pop	{r7, pc}
 189              		.cfi_endproc
 190              	.LFE2:
 192              		.global	__aeabi_i2f
 193              		.global	__aeabi_fmul
 194              		.global	__aeabi_fcmpgt
 195              		.global	__aeabi_f2uiz
 196              		.section	.text.PwmLdd5_SetDutyUS,"ax",%progbits
 197              		.align	2
 198              		.global	PwmLdd5_SetDutyUS
 199              		.code	16
 200              		.thumb_func
 202              	PwmLdd5_SetDutyUS:
 203              	.LFB3:
 183:../Generated_Code/PwmLdd5.c **** 
 184:../Generated_Code/PwmLdd5.c **** /*
 185:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 186:../Generated_Code/PwmLdd5.c **** **     Method      :  PwmLdd5_SetDutyUS (component PWM_LDD)
 187:../Generated_Code/PwmLdd5.c **** **
 188:../Generated_Code/PwmLdd5.c **** **     Description :
 189:../Generated_Code/PwmLdd5.c **** **         This method sets the new duty value of the output signal.
 190:../Generated_Code/PwmLdd5.c **** **         The duty is expressed in microseconds as a 16-bit unsigned
 191:../Generated_Code/PwmLdd5.c **** **         integer number. The method is available only if it is not
 192:../Generated_Code/PwmLdd5.c **** **         selected list of predefined values in <Starting pulse width>
 193:../Generated_Code/PwmLdd5.c **** **         property.
 194:../Generated_Code/PwmLdd5.c **** **     Parameters  :
 195:../Generated_Code/PwmLdd5.c **** **         NAME            - DESCRIPTION
 196:../Generated_Code/PwmLdd5.c **** **       * DeviceDataPtr   - Device data structure
 197:../Generated_Code/PwmLdd5.c **** **                           pointer returned by <Init> method.
 198:../Generated_Code/PwmLdd5.c **** **         Time            - Duty to set [in microseconds]
 199:../Generated_Code/PwmLdd5.c **** **     Returns     :
 200:../Generated_Code/PwmLdd5.c **** **         ---             - Error code, possible codes:
 201:../Generated_Code/PwmLdd5.c **** **                           ERR_OK - OK
 202:../Generated_Code/PwmLdd5.c **** **                           ERR_SPEED - The component does not work in
 203:../Generated_Code/PwmLdd5.c **** **                           the active clock configuration
 204:../Generated_Code/PwmLdd5.c **** **                           ERR_MATH - Overflow during evaluation
 205:../Generated_Code/PwmLdd5.c **** **                           ERR_RANGE - Parameter out of range
 206:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 207:../Generated_Code/PwmLdd5.c **** */
 208:../Generated_Code/PwmLdd5.c **** LDD_TError PwmLdd5_SetDutyUS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
 209:../Generated_Code/PwmLdd5.c **** {
 204              		.loc 1 209 0
 205              		.cfi_startproc
 206 0000 90B5     		push	{r4, r7, lr}
 207              	.LCFI9:
 208              		.cfi_def_cfa_offset 12
 209              		.cfi_offset 4, -12
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 0002 85B0     		sub	sp, sp, #20
 213              	.LCFI10:
 214              		.cfi_def_cfa_offset 32
 215 0004 00AF     		add	r7, sp, #0
 216              	.LCFI11:
 217              		.cfi_def_cfa_register 7
 218 0006 7860     		str	r0, [r7, #4]
 219 0008 0A1C     		mov	r2, r1
 220 000a BB1C     		add	r3, r7, #2
 221 000c 1A80     		strh	r2, [r3]
 210:../Generated_Code/PwmLdd5.c ****   PwmLdd5_TDeviceData *DeviceDataPrv = (PwmLdd5_TDeviceData *)DeviceDataPtr;
 222              		.loc 1 210 0
 223 000e 7B68     		ldr	r3, [r7, #4]
 224 0010 FB60     		str	r3, [r7, #12]
 211:../Generated_Code/PwmLdd5.c ****   LDD_TimerUnit_Tfloat rtval;          /* Result of multiplication */
 212:../Generated_Code/PwmLdd5.c **** 
 213:../Generated_Code/PwmLdd5.c ****   /* Time test - this test can be disabled by setting the "Ignore range checking"
 214:../Generated_Code/PwmLdd5.c ****      property to the "yes" value in the "Configuration inspector" */
 215:../Generated_Code/PwmLdd5.c ****   if (Time > 0x2EE0U) {                /* Is the given value out of range? */
 225              		.loc 1 215 0
 226 0012 BB1C     		add	r3, r7, #2
 227 0014 1A88     		ldrh	r2, [r3]
 228 0016 194B     		ldr	r3, .L16
 229 0018 9A42     		cmp	r2, r3
 230 001a 01D9     		bls	.L11
 216:../Generated_Code/PwmLdd5.c ****     return ERR_RANGE;                  /* If yes then error */
 231              		.loc 1 216 0
 232 001c 0223     		mov	r3, #2
 233 001e 29E0     		b	.L12
 234              	.L11:
 217:../Generated_Code/PwmLdd5.c ****   }
 218:../Generated_Code/PwmLdd5.c ****   rtval = Time * 5.461333333333F;      /* Multiply given value and actual clock configuration coeff
 235              		.loc 1 218 0
 236 0020 BB1C     		add	r3, r7, #2
 237 0022 1B88     		ldrh	r3, [r3]
 238 0024 181C     		mov	r0, r3
 239 0026 FFF7FEFF 		bl	__aeabi_i2f
 240 002a 031C     		add	r3, r0, #0
 241 002c 181C     		add	r0, r3, #0
 242 002e 1449     		ldr	r1, .L16+4
 243 0030 FFF7FEFF 		bl	__aeabi_fmul
 244 0034 031C     		add	r3, r0, #0
 245 0036 BB60     		str	r3, [r7, #8]
 219:../Generated_Code/PwmLdd5.c ****   if (rtval > 0xFFFFUL) {              /* Is the result greater than 65535 ? */
 246              		.loc 1 219 0
 247 0038 0123     		mov	r3, #1
 248 003a 1C1C     		add	r4, r3, #0
 249 003c B868     		ldr	r0, [r7, #8]
 250 003e 1149     		ldr	r1, .L16+8
 251 0040 FFF7FEFF 		bl	__aeabi_fcmpgt
 252 0044 031C     		mov	r3, r0
 253 0046 01D1     		bne	.L13
 254 0048 0023     		mov	r3, #0
 255 004a 1C1C     		add	r4, r3, #0
 256              	.L13:
 257 004c E3B2     		uxtb	r3, r4
 258 004e 002B     		cmp	r3, #0
 259 0050 04D0     		beq	.L14
 220:../Generated_Code/PwmLdd5.c ****     DeviceDataPrv->RatioStore = 0xFFFFU; /* If yes then use maximal possible value */
 260              		.loc 1 220 0
 261 0052 FB68     		ldr	r3, [r7, #12]
 262 0054 0122     		mov	r2, #1
 263 0056 5242     		neg	r2, r2
 264 0058 DA80     		strh	r2, [r3, #6]
 265 005a 06E0     		b	.L15
 266              	.L14:
 221:../Generated_Code/PwmLdd5.c ****   }
 222:../Generated_Code/PwmLdd5.c ****   else {
 223:../Generated_Code/PwmLdd5.c ****     DeviceDataPrv->RatioStore = (uint16_t)rtval;
 267              		.loc 1 223 0
 268 005c B868     		ldr	r0, [r7, #8]
 269 005e FFF7FEFF 		bl	__aeabi_f2uiz
 270 0062 031C     		mov	r3, r0
 271 0064 9AB2     		uxth	r2, r3
 272 0066 FB68     		ldr	r3, [r7, #12]
 273 0068 DA80     		strh	r2, [r3, #6]
 274              	.L15:
 224:../Generated_Code/PwmLdd5.c ****   }
 225:../Generated_Code/PwmLdd5.c ****   SetRatio(DeviceDataPrv);             /* Calculate and set up new appropriate values of the duty r
 275              		.loc 1 225 0
 276 006a FB68     		ldr	r3, [r7, #12]
 277 006c 181C     		mov	r0, r3
 278 006e FFF7FEFF 		bl	SetRatio
 226:../Generated_Code/PwmLdd5.c ****   return ERR_OK;                       /* OK */
 279              		.loc 1 226 0
 280 0072 0023     		mov	r3, #0
 281              	.L12:
 227:../Generated_Code/PwmLdd5.c **** }
 282              		.loc 1 227 0
 283 0074 181C     		mov	r0, r3
 284 0076 BD46     		mov	sp, r7
 285 0078 05B0     		add	sp, sp, #20
 286              		@ sp needed for prologue
 287 007a 90BD     		pop	{r4, r7, pc}
 288              	.L17:
 289              		.align	2
 290              	.L16:
 291 007c E02E0000 		.word	12000
 292 0080 3EC3AE40 		.word	1085195070
 293 0084 00FF7F47 		.word	1199570688
 294              		.cfi_endproc
 295              	.LFE3:
 297              		.section	.text.PwmLdd5_SetDutyMS,"ax",%progbits
 298              		.align	2
 299              		.global	PwmLdd5_SetDutyMS
 300              		.code	16
 301              		.thumb_func
 303              	PwmLdd5_SetDutyMS:
 304              	.LFB4:
 228:../Generated_Code/PwmLdd5.c **** 
 229:../Generated_Code/PwmLdd5.c **** /*
 230:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 231:../Generated_Code/PwmLdd5.c **** **     Method      :  PwmLdd5_SetDutyMS (component PWM_LDD)
 232:../Generated_Code/PwmLdd5.c **** **
 233:../Generated_Code/PwmLdd5.c **** **     Description :
 234:../Generated_Code/PwmLdd5.c **** **         This method sets the new duty value of the output signal.
 235:../Generated_Code/PwmLdd5.c **** **         The duty is expressed in milliseconds as a 16-bit unsigned
 236:../Generated_Code/PwmLdd5.c **** **         integer number. The method is available only if it is not
 237:../Generated_Code/PwmLdd5.c **** **         selected list of predefined values in <Starting pulse width>
 238:../Generated_Code/PwmLdd5.c **** **         property.
 239:../Generated_Code/PwmLdd5.c **** **     Parameters  :
 240:../Generated_Code/PwmLdd5.c **** **         NAME            - DESCRIPTION
 241:../Generated_Code/PwmLdd5.c **** **       * DeviceDataPtr   - Device data structure
 242:../Generated_Code/PwmLdd5.c **** **                           pointer returned by <Init> method.
 243:../Generated_Code/PwmLdd5.c **** **         Time            - Duty to set [in milliseconds]
 244:../Generated_Code/PwmLdd5.c **** **     Returns     :
 245:../Generated_Code/PwmLdd5.c **** **         ---             - Error code, possible codes:
 246:../Generated_Code/PwmLdd5.c **** **                           ERR_OK - OK
 247:../Generated_Code/PwmLdd5.c **** **                           ERR_SPEED - The component does not work in
 248:../Generated_Code/PwmLdd5.c **** **                           the active clock configuration
 249:../Generated_Code/PwmLdd5.c **** **                           ERR_MATH - Overflow during evaluation
 250:../Generated_Code/PwmLdd5.c **** **                           ERR_RANGE - Parameter out of range
 251:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 252:../Generated_Code/PwmLdd5.c **** */
 253:../Generated_Code/PwmLdd5.c **** LDD_TError PwmLdd5_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
 254:../Generated_Code/PwmLdd5.c **** {
 305              		.loc 1 254 0
 306              		.cfi_startproc
 307 0000 90B5     		push	{r4, r7, lr}
 308              	.LCFI12:
 309              		.cfi_def_cfa_offset 12
 310              		.cfi_offset 4, -12
 311              		.cfi_offset 7, -8
 312              		.cfi_offset 14, -4
 313 0002 85B0     		sub	sp, sp, #20
 314              	.LCFI13:
 315              		.cfi_def_cfa_offset 32
 316 0004 00AF     		add	r7, sp, #0
 317              	.LCFI14:
 318              		.cfi_def_cfa_register 7
 319 0006 7860     		str	r0, [r7, #4]
 320 0008 0A1C     		mov	r2, r1
 321 000a BB1C     		add	r3, r7, #2
 322 000c 1A80     		strh	r2, [r3]
 255:../Generated_Code/PwmLdd5.c ****   PwmLdd5_TDeviceData *DeviceDataPrv = (PwmLdd5_TDeviceData *)DeviceDataPtr;
 323              		.loc 1 255 0
 324 000e 7B68     		ldr	r3, [r7, #4]
 325 0010 FB60     		str	r3, [r7, #12]
 256:../Generated_Code/PwmLdd5.c ****   LDD_TimerUnit_Tfloat rtval;          /* Result of multiplication */
 257:../Generated_Code/PwmLdd5.c **** 
 258:../Generated_Code/PwmLdd5.c ****   /* Time test - this test can be disabled by setting the "Ignore range checking"
 259:../Generated_Code/PwmLdd5.c ****      property to the "yes" value in the "Configuration inspector" */
 260:../Generated_Code/PwmLdd5.c ****   if (Time > 0x0CU) {                  /* Is the given value out of range? */
 326              		.loc 1 260 0
 327 0012 BB1C     		add	r3, r7, #2
 328 0014 1B88     		ldrh	r3, [r3]
 329 0016 0C2B     		cmp	r3, #12
 330 0018 01D9     		bls	.L19
 261:../Generated_Code/PwmLdd5.c ****     return ERR_RANGE;                  /* If yes then error */
 331              		.loc 1 261 0
 332 001a 0223     		mov	r3, #2
 333 001c 29E0     		b	.L20
 334              	.L19:
 262:../Generated_Code/PwmLdd5.c ****   }
 263:../Generated_Code/PwmLdd5.c ****   rtval = Time * 5461.333333333334F;   /* Multiply given value and actual clock configuration coeff
 335              		.loc 1 263 0
 336 001e BB1C     		add	r3, r7, #2
 337 0020 1B88     		ldrh	r3, [r3]
 338 0022 181C     		mov	r0, r3
 339 0024 FFF7FEFF 		bl	__aeabi_i2f
 340 0028 031C     		add	r3, r0, #0
 341 002a 181C     		add	r0, r3, #0
 342 002c 1349     		ldr	r1, .L24
 343 002e FFF7FEFF 		bl	__aeabi_fmul
 344 0032 031C     		add	r3, r0, #0
 345 0034 BB60     		str	r3, [r7, #8]
 264:../Generated_Code/PwmLdd5.c ****   if (rtval > 0xFFFFUL) {              /* Is the result greater than 65535 ? */
 346              		.loc 1 264 0
 347 0036 0123     		mov	r3, #1
 348 0038 1C1C     		add	r4, r3, #0
 349 003a B868     		ldr	r0, [r7, #8]
 350 003c 1049     		ldr	r1, .L24+4
 351 003e FFF7FEFF 		bl	__aeabi_fcmpgt
 352 0042 031C     		mov	r3, r0
 353 0044 01D1     		bne	.L21
 354 0046 0023     		mov	r3, #0
 355 0048 1C1C     		add	r4, r3, #0
 356              	.L21:
 357 004a E3B2     		uxtb	r3, r4
 358 004c 002B     		cmp	r3, #0
 359 004e 04D0     		beq	.L22
 265:../Generated_Code/PwmLdd5.c ****     DeviceDataPrv->RatioStore = 0xFFFFU; /* If yes then use maximal possible value */
 360              		.loc 1 265 0
 361 0050 FB68     		ldr	r3, [r7, #12]
 362 0052 0122     		mov	r2, #1
 363 0054 5242     		neg	r2, r2
 364 0056 DA80     		strh	r2, [r3, #6]
 365 0058 06E0     		b	.L23
 366              	.L22:
 266:../Generated_Code/PwmLdd5.c ****   }
 267:../Generated_Code/PwmLdd5.c ****   else {
 268:../Generated_Code/PwmLdd5.c ****     DeviceDataPrv->RatioStore = (uint16_t)rtval;
 367              		.loc 1 268 0
 368 005a B868     		ldr	r0, [r7, #8]
 369 005c FFF7FEFF 		bl	__aeabi_f2uiz
 370 0060 031C     		mov	r3, r0
 371 0062 9AB2     		uxth	r2, r3
 372 0064 FB68     		ldr	r3, [r7, #12]
 373 0066 DA80     		strh	r2, [r3, #6]
 374              	.L23:
 269:../Generated_Code/PwmLdd5.c ****   }
 270:../Generated_Code/PwmLdd5.c ****   SetRatio(DeviceDataPrv);             /* Calculate and set up new appropriate values of the duty r
 375              		.loc 1 270 0
 376 0068 FB68     		ldr	r3, [r7, #12]
 377 006a 181C     		mov	r0, r3
 378 006c FFF7FEFF 		bl	SetRatio
 271:../Generated_Code/PwmLdd5.c ****   return ERR_OK;                       /* OK */
 379              		.loc 1 271 0
 380 0070 0023     		mov	r3, #0
 381              	.L20:
 272:../Generated_Code/PwmLdd5.c **** }
 382              		.loc 1 272 0
 383 0072 181C     		mov	r0, r3
 384 0074 BD46     		mov	sp, r7
 385 0076 05B0     		add	sp, sp, #20
 386              		@ sp needed for prologue
 387 0078 90BD     		pop	{r4, r7, pc}
 388              	.L25:
 389 007a C046     		.align	2
 390              	.L24:
 391 007c ABAAAA45 		.word	1168812715
 392 0080 00FF7F47 		.word	1199570688
 393              		.cfi_endproc
 394              	.LFE4:
 396              		.section	.text.TU2_OnCounterRestart,"ax",%progbits
 397              		.align	2
 398              		.global	TU2_OnCounterRestart
 399              		.code	16
 400              		.thumb_func
 402              	TU2_OnCounterRestart:
 403              	.LFB5:
 273:../Generated_Code/PwmLdd5.c **** 
 274:../Generated_Code/PwmLdd5.c **** /*
 275:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 276:../Generated_Code/PwmLdd5.c **** **     Method      :  PwmLdd5_OnCounterRestart (component PWM_LDD)
 277:../Generated_Code/PwmLdd5.c **** **
 278:../Generated_Code/PwmLdd5.c **** **     Description :
 279:../Generated_Code/PwmLdd5.c **** **         Called if counter overflow/underflow or counter is 
 280:../Generated_Code/PwmLdd5.c **** **         reinitialized by modulo or compare register matching. 
 281:../Generated_Code/PwmLdd5.c **** **         OnCounterRestart event and Timer unit must be enabled. See <a 
 282:../Generated_Code/PwmLdd5.c **** **         href="UntitledMethods.html#SetEventMask">SetEventMask</a> and 
 283:../Generated_Code/PwmLdd5.c **** **         <a href="UntitledMethods.html#GetEventMask">GetEventMask</a> 
 284:../Generated_Code/PwmLdd5.c **** **         methods.This event is available only if a <a 
 285:../Generated_Code/PwmLdd5.c **** **         href="UntitledProperties.html#IntServiceCounter">Interrupt</a> 
 286:../Generated_Code/PwmLdd5.c **** **         is enabled. The event services the event of the inherited 
 287:../Generated_Code/PwmLdd5.c **** **         component and eventually invokes other events.
 288:../Generated_Code/PwmLdd5.c **** **         This method is internal. It is used by Processor Expert only.
 289:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 290:../Generated_Code/PwmLdd5.c **** */
 291:../Generated_Code/PwmLdd5.c **** void TU2_OnCounterRestart(LDD_TUserData *UserDataPtr)
 292:../Generated_Code/PwmLdd5.c **** {
 404              		.loc 1 292 0
 405              		.cfi_startproc
 406 0000 80B5     		push	{r7, lr}
 407              	.LCFI15:
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 84B0     		sub	sp, sp, #16
 412              	.LCFI16:
 413              		.cfi_def_cfa_offset 24
 414 0004 00AF     		add	r7, sp, #0
 415              	.LCFI17:
 416              		.cfi_def_cfa_register 7
 417 0006 7860     		str	r0, [r7, #4]
 293:../Generated_Code/PwmLdd5.c ****   PwmLdd5_TDeviceData *DeviceDataPrv = PE_LDD_DeviceDataList[PE_LDD_COMPONENT_PwmLdd5_ID];
 418              		.loc 1 293 0
 419 0008 064B     		ldr	r3, .L27
 420 000a DB6B     		ldr	r3, [r3, #60]
 421 000c FB60     		str	r3, [r7, #12]
 294:../Generated_Code/PwmLdd5.c **** 
 295:../Generated_Code/PwmLdd5.c ****   PwmLdd5_OnEnd(DeviceDataPrv->UserDataPtr); /* Invoke OnEnd event */
 422              		.loc 1 295 0
 423 000e FB68     		ldr	r3, [r7, #12]
 424 0010 9B68     		ldr	r3, [r3, #8]
 425 0012 181C     		mov	r0, r3
 426 0014 FFF7FEFF 		bl	PwmLdd5_OnEnd
 296:../Generated_Code/PwmLdd5.c ****   TU2_OnCounterRestart_Old();
 427              		.loc 1 296 0
 428 0018 FFF7FEFF 		bl	TU2_OnCounterRestart_Old
 297:../Generated_Code/PwmLdd5.c **** }
 429              		.loc 1 297 0
 430 001c BD46     		mov	sp, r7
 431 001e 04B0     		add	sp, sp, #16
 432              		@ sp needed for prologue
 433 0020 80BD     		pop	{r7, pc}
 434              	.L28:
 435 0022 C046     		.align	2
 436              	.L27:
 437 0024 00000000 		.word	PE_LDD_DeviceDataList
 438              		.cfi_endproc
 439              	.LFE5:
 441              		.section	.text.SetRatio,"ax",%progbits
 442              		.align	2
 443              		.code	16
 444              		.thumb_func
 446              	SetRatio:
 447              	.LFB6:
 298:../Generated_Code/PwmLdd5.c **** 
 299:../Generated_Code/PwmLdd5.c **** /*
 300:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 301:../Generated_Code/PwmLdd5.c **** **     Method      :  SetRatio (component PWM_LDD)
 302:../Generated_Code/PwmLdd5.c **** **
 303:../Generated_Code/PwmLdd5.c **** **     Description :
 304:../Generated_Code/PwmLdd5.c **** **         This method calculates new value of duty compare register from 
 305:../Generated_Code/PwmLdd5.c **** **         variable RatioStore.
 306:../Generated_Code/PwmLdd5.c **** **         This method is internal. It is used by Processor Expert only.
 307:../Generated_Code/PwmLdd5.c **** ** ===================================================================
 308:../Generated_Code/PwmLdd5.c **** */
 309:../Generated_Code/PwmLdd5.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr)
 310:../Generated_Code/PwmLdd5.c **** {
 448              		.loc 1 310 0
 449              		.cfi_startproc
 450 0000 80B5     		push	{r7, lr}
 451              	.LCFI18:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 7, -8
 454              		.cfi_offset 14, -4
 455 0002 86B0     		sub	sp, sp, #24
 456              	.LCFI19:
 457              		.cfi_def_cfa_offset 32
 458 0004 00AF     		add	r7, sp, #0
 459              	.LCFI20:
 460              		.cfi_def_cfa_register 7
 461 0006 7860     		str	r0, [r7, #4]
 311:../Generated_Code/PwmLdd5.c ****   PwmLdd5_TDeviceData *DeviceDataPrv = (PwmLdd5_TDeviceData*)DeviceDataPtr;
 462              		.loc 1 311 0
 463 0008 7B68     		ldr	r3, [r7, #4]
 464 000a 3B61     		str	r3, [r7, #16]
 312:../Generated_Code/PwmLdd5.c ****   uint16_t Period;
 313:../Generated_Code/PwmLdd5.c ****   uint16_t Duty;
 314:../Generated_Code/PwmLdd5.c **** 
 315:../Generated_Code/PwmLdd5.c ****   (void)TU2_GetPeriodTicks(DeviceDataPrv->LinkedDeviceDataPtr, &Period);
 465              		.loc 1 315 0
 466 000c 3B69     		ldr	r3, [r7, #16]
 467 000e 1A68     		ldr	r2, [r3]
 468 0010 3B1C     		mov	r3, r7
 469 0012 0E33     		add	r3, r3, #14
 470 0014 101C     		mov	r0, r2
 471 0016 191C     		mov	r1, r3
 472 0018 FFF7FEFF 		bl	TU2_GetPeriodTicks
 316:../Generated_Code/PwmLdd5.c ****   if (Period == 0U) {
 473              		.loc 1 316 0
 474 001c 3B1C     		mov	r3, r7
 475 001e 0E33     		add	r3, r3, #14
 476 0020 1B88     		ldrh	r3, [r3]
 477 0022 002B     		cmp	r3, #0
 478 0024 05D1     		bne	.L30
 317:../Generated_Code/PwmLdd5.c ****     Duty = DeviceDataPrv->RatioStore;
 479              		.loc 1 317 0
 480 0026 3B1C     		mov	r3, r7
 481 0028 1633     		add	r3, r3, #22
 482 002a 3A69     		ldr	r2, [r7, #16]
 483 002c D288     		ldrh	r2, [r2, #6]
 484 002e 1A80     		strh	r2, [r3]
 485 0030 11E0     		b	.L31
 486              	.L30:
 318:../Generated_Code/PwmLdd5.c ****   }
 319:../Generated_Code/PwmLdd5.c ****   else {
 320:../Generated_Code/PwmLdd5.c ****     Duty = (uint16_t)((((uint32_t)Period * DeviceDataPrv->RatioStore) + ((Period - 1U) & 0x8000)) >
 487              		.loc 1 320 0
 488 0032 3B1C     		mov	r3, r7
 489 0034 0E33     		add	r3, r3, #14
 490 0036 1B88     		ldrh	r3, [r3]
 491 0038 3A69     		ldr	r2, [r7, #16]
 492 003a D288     		ldrh	r2, [r2, #6]
 493 003c 5A43     		mul	r2, r3
 494 003e 3B1C     		mov	r3, r7
 495 0040 0E33     		add	r3, r3, #14
 496 0042 1B88     		ldrh	r3, [r3]
 497 0044 591E     		sub	r1, r3, #1
 498 0046 8023     		mov	r3, #128
 499 0048 1B02     		lsl	r3, r3, #8
 500 004a 0B40     		and	r3, r1
 501 004c D318     		add	r3, r2, r3
 502 004e 1A0C     		lsr	r2, r3, #16
 503 0050 3B1C     		mov	r3, r7
 504 0052 1633     		add	r3, r3, #22
 505 0054 1A80     		strh	r2, [r3]
 506              	.L31:
 321:../Generated_Code/PwmLdd5.c ****   }
 322:../Generated_Code/PwmLdd5.c ****   (void)TU2_SetOffsetTicks(DeviceDataPrv->LinkedDeviceDataPtr, CHANNEL, Duty);
 507              		.loc 1 322 0
 508 0056 3B69     		ldr	r3, [r7, #16]
 509 0058 1A68     		ldr	r2, [r3]
 510 005a 3B1C     		mov	r3, r7
 511 005c 1633     		add	r3, r3, #22
 512 005e 1B88     		ldrh	r3, [r3]
 513 0060 101C     		mov	r0, r2
 514 0062 0021     		mov	r1, #0
 515 0064 1A1C     		mov	r2, r3
 516 0066 FFF7FEFF 		bl	TU2_SetOffsetTicks
 323:../Generated_Code/PwmLdd5.c **** }
 517              		.loc 1 323 0
 518 006a BD46     		mov	sp, r7
 519 006c 06B0     		add	sp, sp, #24
 520              		@ sp needed for prologue
 521 006e 80BD     		pop	{r7, pc}
 522              		.cfi_endproc
 523              	.LFE6:
 525              		.text
 526              	.Letext0:
 527              		.file 2 "C:/Freescale/CW MCU v10.3/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 528              		.file 3 "../Generated_Code/PE_Types.h"
 529              		.file 4 "../Generated_Code/PE_LDD.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PwmLdd5.c
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:24     .text.PwmLdd5_Init:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:29     .text.PwmLdd5_Init:00000000 PwmLdd5_Init
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:92     .text.PwmLdd5_Init:00000048 $d
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:99     .text.PwmLdd5_Deinit:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:104    .text.PwmLdd5_Deinit:00000000 PwmLdd5_Deinit
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:140    .text.PwmLdd5_Deinit:00000024 $d
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:145    .text.PwmLdd5_SetRatio16:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:150    .text.PwmLdd5_SetRatio16:00000000 PwmLdd5_SetRatio16
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:446    .text.SetRatio:00000000 SetRatio
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:197    .text.PwmLdd5_SetDutyUS:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:202    .text.PwmLdd5_SetDutyUS:00000000 PwmLdd5_SetDutyUS
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:291    .text.PwmLdd5_SetDutyUS:0000007c $d
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:298    .text.PwmLdd5_SetDutyMS:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:303    .text.PwmLdd5_SetDutyMS:00000000 PwmLdd5_SetDutyMS
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:391    .text.PwmLdd5_SetDutyMS:0000007c $d
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:397    .text.TU2_OnCounterRestart:00000000 $t
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:402    .text.TU2_OnCounterRestart:00000000 TU2_OnCounterRestart
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:437    .text.TU2_OnCounterRestart:00000024 $d
C:\DOCUME~1\chenty\LOCALS~1\Temp\ccU3Nimn.s:442    .text.SetRatio:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TU2_Init
PE_LDD_DeviceDataList
TU2_Deinit
__aeabi_i2f
__aeabi_fmul
__aeabi_fcmpgt
__aeabi_f2uiz
PwmLdd5_OnEnd
TU2_OnCounterRestart_Old
TU2_GetPeriodTicks
TU2_SetOffsetTicks
